class BotLogic

		# –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ª–æ–≥–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
		# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è learn_status –ø–æ–∫–∞–∑—ã–≤–µ—Ç –Ω–∞—á–∞–ª—Å—è —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–æ –≤—Å–µ –ø–æ–ª—É—á–µ–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ø–∞–¥—É—Ç —Å—É–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤

	module Learn

			attr_accessor :learn_status, :formuls_list, :right_answer, :counter_right_answer, :step_number

			# —É formuls_list —Å–ª–µ–¥—É—é—â—Ç–π —Ñ–æ—Ä–º–∞—Ç [{"formul"=>"formul", "sticker_id"=>"sticker_id", "them_id"=>"them_id","file_unique_id"=>"file_unique_id", "them"=>"them"}]
			
		def start_learn(user_choice)
				
				# –ø–æ–ª—É—á–µ–º —Ñ–æ—Ä–º—É–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª user –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ db
				
				set_formuls_list(user_choice)
				
				#  –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è 

				user_hash = {"user_id" => Main::Sortmessage.user_id ,"learn_status" => true, "counter_right_answer" => 0, "step_number" => 0}
				
				Database.update_user_hash(user_hash)

				# –æ–±—ä—è–≤–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ
				Main::Sortmessage::SendMessage.standart_message("–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø, –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç–∏–∫–µ—Ä, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã.\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫")
				
				# —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
				Learn.first_question
		end



			def set_formuls_list(user_choice)

				# –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ –º–µ—Ö–∞–Ω–∏–∫–∞ –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
				user_choice.include?("–ú–µ—Ö–∞–Ω–∏–∫–∞") ? formuls = Database::select_formuls_from_all_section : formuls = Database::select_formuls_for_learn_by_topics(user_choice)
				formuls_list = []			
				formuls.each { |x| formuls_list << {"formul"=>x[0], "sticker_id"=> x[1], "them_id"=> x[2],"file_unique_id"=> x[3], "them"=> x[4]} }
				user_id = Main::Sortmessage.user_id
				 # —Å—Ä–∞–∑—É –∑–∞–Ω–æ—Å–∏–º –≤ db 
				Database.set_formuls_list(formuls_list, user_id)


			end
			def first_question
				Main::Sortmessage::SendMessage.inline_message(
					"–í—ã –≥–æ—Ç–æ–≤—ã?",
					Telegram::Bot::Types::ReplyKeyboardMarkup.new(keyboard: [[{ text: "–¥–∞" }],[{ text: "–Ω–µ—Ç" }]], one_time_keyboard: true)
				)
				user_hash = {"user_id" => Main::Sortmessage.user_id, "right_answer" => "'–¥–∞'"}
				Database::update_user_hash(user_hash)

			end
			def send_sticker_select_answer
				formul = Database::select_formuls_list(Main::Sortmessage.user_id).sample
				sticker_id = formul["sticker_id"]
				right_answer = "#{formul["formul"]}. #{formul["them"]}"
				user_hash = {"user_id" => Main::Sortmessage.user_id, "right_answer" => "'#{right_answer}'"}
				Database::update_user_hash(user_hash)

				Main::Sortmessage::SendMessage.sticker_message(sticker_id)
				kb = answer_keybord_generate(right_answer)
				Main::Sortmessage::SendMessage.inline_message("–∫–∞–∫–∞—è —ç—Ç–æ —Ñ–æ—Ä–º—É–ª–∞?", kb)
			end
			def send_formul_select_sticker
				formul = Database::select_formuls_list(Main::Sortmessage.user_id).sample
				right_answer = formul["file_unique_id"]
				user_hash = {"user_id" => Main::Sortmessage.user_id, "right_answer" => "'#{right_answer}'"}
				Database::update_user_hash(user_hash)

				Main::Sortmessage::SendMessage.standart_message("–û—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–∫–µ—Ä")
				Main::Sortmessage::SendMessage.standart_message("#{formul["formul"]}. #{formul["them"]}")
			end

			def check_answer(answer)

				user_hash = Database::user_hash(Main::Sortmessage.user_id)
				if user_hash["step_number"] == 0
					if answer == user_hash["right_answer"]
						Main::Sortmessage::SendMessage.standart_message("–û—Ç–ª–∏—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º")
						step_number = 1
						user_hash = {"user_id" => Main::Sortmessage.user_id, "step_number" => step_number}
						Database::update_user_hash(user_hash)
						Learn.next_step
					else
						Main::Sortmessage::SendMessage.standart_message("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞")						
					end
				else 						
					if answer == user_hash["right_answer"]

						counter_right_answer = user_hash["counter_right_answer"]+1

						user_hash = {"user_id" => Main::Sortmessage.user_id, "counter_right_answer" => counter_right_answer}
						Database::update_user_hash(user_hash)

						Main::Sortmessage::SendMessage.standart_message("–ü—Ä–∞–≤–∏–ª—å–Ω–æ")
						Main::Sortmessage::SendMessage.standart_message("#{counter_right_answer} –∏–∑ 3")
						Learn.next_step
					else
						counter_right_answer = 0
						user_hash = {"user_id" => Main::Sortmessage.user_id, "counter_right_answer" => counter_right_answer}
						Database::update_user_hash(user_hash)
						Main::Sortmessage::SendMessage.standart_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–≥–æ—Ä–µ–ª!")
						Main::Sortmessage::SendMessage.standart_message("#{counter_right_answer} –∏–∑ 3")
						Learn.next_step
					end
				end
			end
			def next_step
				user_hash = Database::user_hash(Main::Sortmessage.user_id)
				counter_right_answer = user_hash["counter_right_answer"]
				step_number = user_hash["step_number"]

				if counter_right_answer == 3 
					step_number +=1
					counter_right_answer = 0
					user_hash = {"user_id" => Main::Sortmessage.user_id, "counter_right_answer" => counter_right_answer, "step_number" => step_number}
					Database::update_user_hash(user_hash)
					Main::Sortmessage::SendMessage.standart_message("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É üí™ ")
				end

				case step_number


				when 1
					Learn.send_sticker_select_answer
				when 2
					Learn.send_formul_select_sticker
				when 3
					Main::Sortmessage::SendMessage.standart_message("–ú–æ–ª–æ–¥–µ—Ü —Ç—ã –ø–æ–±–µ–¥–∏–ª!! ü•∏")

				end
			end

			def answer_keybord_generate(right_answer)
				 # –≤ –∫–æ–Ω—Ü–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —á—Ç–æ –±—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –≤—Å–µ –≤—Ä–µ–º—è –ø–µ—Ä–≤—ã–º

				kb = [[{ text: right_answer }],[{ text: answer_text }],[{ text: answer_text }], [{ text: answer_text }]].sample(4)

				answers =Telegram::Bot::Types::ReplyKeyboardMarkup.new(
					keyboard: kb,
					one_time_keyboard: true
				)
			end
			def answer_text				
				formul = Database::select_formuls_list(Main::Sortmessage.user_id).sample
				answer_text = "#{formul["formul"]}. #{formul["them"]}"
			end


			module_function(
				:set_formuls_list,
				:answer_keybord_generate,
				:start_learn,
				:send_sticker_select_answer,
				:check_answer,
				:right_answer,
				:right_answer=,
				:answer_text,
				:counter_right_answer,
				:counter_right_answer=,
				:step_number,
				:step_number=,
				:send_formul_select_sticker,
				:next_step,
				:first_question
				)
			end
end